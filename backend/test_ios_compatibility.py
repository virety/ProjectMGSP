#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Django Backend —Å iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
import django
from decimal import Decimal
from datetime import date, timedelta
import random
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nyota_bank.settings')
django.setup()

from api.models import User, Card, Loan, Mortgage, Deposit

class IOSCompatibilityTest:
    def __init__(self):
        self.passed = 0
        self.failed = 0
        self.test_users = []
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        for user in self.test_users:
            try:
                user.delete()
            except:
                pass
        self.test_users = []
        
    def create_test_user(self, suffix=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º"""
        timestamp = str(int(time.time() * 1000))[-8:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ü–∏—Ñ—Ä timestamp
        phone = f"+7999{timestamp}{suffix}"
        
        user = User.objects.create_user(
            phone_number=phone,
            password="testpass123",
            first_name="–¢–µ—Å—Ç",
            last_name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{suffix}"
        )
        self.test_users.append(user)
        return user
        
    def log_success(self, message):
        print(f"‚úÖ {message}")
        self.passed += 1
        
    def log_error(self, message):
        print(f"‚ùå {message}")
        self.failed += 1
        
    def test_user_fields(self):
        """–¢–µ—Å—Ç –ø–æ–ª–µ–π User –º–æ–¥–µ–ª–∏ –¥–ª—è iOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User –º–æ–¥–µ–ª–∏...")
        
        user = self.create_test_user("1")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ total_balance –ø–æ–ª—è
        if hasattr(user, 'total_balance'):
            self.log_success("User.total_balance –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ update_total_balance
            if hasattr(user, 'update_total_balance'):
                user.update_total_balance()
                self.log_success("User.update_total_balance() –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.log_error("User.update_total_balance() –º–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            self.log_error("User.total_balance –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    def test_card_fields(self):
        """–¢–µ—Å—Ç –ø–æ–ª–µ–π Card –º–æ–¥–µ–ª–∏ –¥–ª—è iOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Card –º–æ–¥–µ–ª–∏...")
        
        user = self.create_test_user("2")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        card_number = ''.join([str(random.randint(0, 9)) for _ in range(16)])
        
        card = Card.objects.create(
            owner=user,
            card_name="Test Card",
            card_number=card_number,
            balance=Decimal('1000.00'),
            card_expiry_date=date.today() + timedelta(days=365),
            cvv="123",
            gradient_start_hex="#FF6B6B",
            gradient_end_hex="#4ECDC4"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º gradient –ø–æ–ª—è
        if hasattr(card, 'gradient_start_hex') and hasattr(card, 'gradient_end_hex'):
            self.log_success("Card gradient –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            if card.gradient_start_hex == "#FF6B6B" and card.gradient_end_hex == "#4ECDC4":
                self.log_success("Card gradient –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.log_error("Card gradient –ø–æ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            self.log_error("Card gradient –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
    def test_loan_fields(self):
        """–¢–µ—Å—Ç –ø–æ–ª–µ–π Loan –º–æ–¥–µ–ª–∏ –¥–ª—è iOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Loan –º–æ–¥–µ–ª–∏...")
        
        user = self.create_test_user("3")
        
        loan = Loan.objects.create(
            user=user,
            total_amount=Decimal('100000.00'),
            remaining_debt=Decimal('90000.00'),
            interest_rate=Decimal('12.5'),
            term_months=24,
            monthly_payment=Decimal('5000.00'),
            next_payment_date=date.today() + timedelta(days=30),
            late_payments=2,
            next_payment_amount=Decimal('5200.00')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        required_fields = ['late_payments', 'next_payment_amount']
        for field in required_fields:
            if hasattr(loan, field):
                self.log_success(f"Loan.{field} –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                self.log_error(f"Loan.{field} –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    def test_mortgage_fields(self):
        """–¢–µ—Å—Ç –ø–æ–ª–µ–π Mortgage –º–æ–¥–µ–ª–∏ –¥–ª—è iOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mortgage –º–æ–¥–µ–ª–∏...")
        
        user = self.create_test_user("4")
        
        mortgage = Mortgage.objects.create(
            user=user,
            property_cost=Decimal('5000000.00'),
            initial_payment=Decimal('1000000.00'),
            total_amount=Decimal('4000000.00'),
            term_years=20,
            interest_rate=Decimal('8.5'),
            monthly_payment=Decimal('25000.00'),
            late_payments=1,
            central_bank_rate=Decimal('7.5'),
            overpayment=Decimal('50000.00')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        required_fields = ['late_payments', 'central_bank_rate', 'overpayment']
        for field in required_fields:
            if hasattr(mortgage, field):
                self.log_success(f"Mortgage.{field} –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                self.log_error(f"Mortgage.{field} –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    def test_deposit_fields(self):
        """–¢–µ—Å—Ç –ø–æ–ª–µ–π Deposit –º–æ–¥–µ–ª–∏ –¥–ª—è iOS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Deposit –º–æ–¥–µ–ª–∏...")
        
        user = self.create_test_user("5")
        
        deposit = Deposit.objects.create(
            user=user,
            amount=Decimal('50000.00'),
            interest_rate=Decimal('6.5'),
            term_months=12,
            total_interest=Decimal('3250.00')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        if hasattr(deposit, 'total_interest'):
            self.log_success("Deposit.total_interest –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if deposit.total_interest == Decimal('3250.00'):
                self.log_success("Deposit.total_interest –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                self.log_error("Deposit.total_interest –ø–æ–ª–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            self.log_error("Deposit.total_interest –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å iOS...")
        
        try:
            self.test_user_fields()
            self.test_card_fields()
            self.test_loan_fields()
            self.test_mortgage_fields()
            self.test_deposit_fields()
        finally:
            self.cleanup()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.passed}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.failed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.passed / (self.passed + self.failed) * 100):.1f}%")
        
        if self.failed == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Backend –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å iOS!")
        else:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.failed} –ø—Ä–æ–±–ª–µ–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å iOS.")

if __name__ == "__main__":
    test = IOSCompatibilityTest()
    test.run_all_tests() 