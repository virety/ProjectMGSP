//
//  CommentsView.swift
//  BankApp
//
//  Created by –í–∞–¥–∏–º –°–µ–º–∏–±—Ä–∞—Ç–æ–≤ on 05.06.2025.
//

import SwiftUI
import CoreData

struct CommentsView: View {
    let postId: NSManagedObjectID
    
    @Environment(\.managedObjectContext) private var viewContext
    @Environment(\.dismiss) private var dismiss
    
    @State private var newCommentText = ""
    @State private var comments: [CDComment] = []
    
    let currentUserId = UUID(uuidString: "00000000-0000-0000-0000-000000000001") ?? UUID()
    
    var body: some View {
        VStack {
            HStack {
                Button("–ó–∞–∫—Ä—ã—Ç—å") { dismiss() }
                    .foregroundColor(.blue)
                Spacer()
            }

            Text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
                .font(.title2)
                .bold()
                .padding(.vertical)

            ScrollView {
                LazyVStack(alignment: .leading, spacing: 12) {
                    let commentArray: [CDComment] = comments
                }
            }

            Divider()

            HStack {
                TextField("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...", text: $newCommentText)
                    .textFieldStyle(RoundedBorderTextFieldStyle())

                Button("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å") {
                    addComment()
                }
                .disabled(newCommentText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
            }
            .padding(.bottom, 8)
        }
        .padding()
        .onAppear(perform: loadComments)
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }

    private func loadComments() {
        do {
            if let post = try viewContext.existingObject(with: postId) as? CDPost {
                if let commentSet = post.comments as? Set<CDComment> {
                    let sortedComments = commentSet.sorted {
                        ($0.dateCreated ?? Date.distantPast) < ($1.dateCreated ?? Date.distantPast)
                    }
                    comments = sortedComments
                }
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: \(error)")
        }
    }

    private func addComment() {
        let trimmedText = newCommentText.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !trimmedText.isEmpty else { return }

        do {
            if let post = try viewContext.existingObject(with: postId) as? CDPost {
                let comment = CDComment(context: viewContext)
                comment.text = trimmedText
                let now = Date()
                comment.dateCreated = now
                comment.post = post

                if let user = fetchOrCreateUser(id: currentUserId) {
                    comment.user = user
                }

                try viewContext.save()
                newCommentText = ""
                loadComments()
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: \(error)")
        }
    }

    private func fetchOrCreateUser(id: UUID) -> CDUser? {
        let request = CDUser.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        request.fetchLimit = 1

        do {
            let users = try viewContext.fetch(request)
            if let user = users.first {
                return user
            } else {
                let newUser = CDUser(context: viewContext)
                newUser.setValue(id, forKey: "id") // –ò–∑–±–µ–≥–∞–µ–º –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ `id`, —Ç.–∫. –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å readonly
                newUser.firstName = "–¢–µ–∫—É—â–∏–π"
                newUser.lastName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                newUser.avatar = "üë§"
                newUser.status = "–ì–æ—Å—Ç—å"
                try viewContext.save()
                return newUser
            }
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error)")
            return nil
        }
    }
}
