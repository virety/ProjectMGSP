import React, { useState, useEffect } from 'react';
import './CreatePostModal.css';
import { FaTimes } from 'react-icons/fa';

const AVAILABLE_STATUSES = [
  '–¢—Ä–µ–π–¥–µ—Ä',
  '–ê–Ω–∞–ª–∏—Ç–∏–∫',
  '–ò–Ω–≤–µ—Å—Ç–æ—Ä',
  '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
  '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ç—Ä–µ–π–¥–µ—Ä'
];

const AVAILABLE_AVATARS = [
  { emoji: 'üìä', label: '–ì—Ä–∞—Ñ–∏–∫' },
  { emoji: 'üìà', label: '–†–æ—Å—Ç' },
  { emoji: 'üìâ', label: '–ü–∞–¥–µ–Ω–∏–µ' },
  { emoji: 'üíπ', label: '–ö—É—Ä—Å' },
  { emoji: 'üè¶', label: '–ë–∞–Ω–∫' },
  { emoji: 'üíº', label: '–ü–æ—Ä—Ç—Ñ–µ–ª—å' },
  { emoji: 'üéØ', label: '–¶–µ–ª—å' },
  { emoji: '‚ö°', label: '–ú–æ–ª–Ω–∏—è' }
];

const CURRENCY_PAIRS = [
  { value: 'EUR/RUB', label: 'EUR/RUB - –ï–≤—Ä–æ/–†—É–±–ª—å' },
  { value: 'USD/RUB', label: 'USD/RUB - –î–æ–ª–ª–∞—Ä/–†—É–±–ª—å' },
  { value: 'GBP/RUB', label: 'GBP/RUB - –§—É–Ω—Ç/–†—É–±–ª—å' },
  { value: 'CNY/RUB', label: 'CNY/RUB - –Æ–∞–Ω—å/–†—É–±–ª—å' },
  { value: 'JPY/RUB', label: 'JPY/RUB - –ò–µ–Ω–∞/–†—É–±–ª—å' },
  { value: 'CHF/RUB', label: 'CHF/RUB - –§—Ä–∞–Ω–∫/–†—É–±–ª—å' }
];

const CreatePostModal = ({ isOpen, onClose, onSubmit }) => {
  const [formData, setFormData] = useState({
    currency: 'EUR/RUB',
    prediction: '–†–æ—Å—Ç',
    confidence: 50,
    description: ''
  });

  const [selectedStatus, setSelectedStatus] = useState('–¢—Ä–µ–π–¥–µ—Ä');
  const [selectedAvatar, setSelectedAvatar] = useState(AVAILABLE_AVATARS[0]);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ window.userData
    if (window.userData) {
      const firstName = window.userData.firstName || '';
      const lastName = window.userData.lastName || '';
      const fullName = [firstName, lastName].filter(Boolean).join(' ');
      setUserName(fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit({
      ...formData,
      author: {
        name: userName,
        role: selectedStatus,
        avatar: selectedAvatar.emoji
      }
    });
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content create-post-modal">
        <button className="modal-close" onClick={onClose}>
          <FaTimes />
        </button>
        
        <div className="modal-header">
          <h2>–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</h2>
          <div className="user-info">
            <div className="user-avatar">
              {selectedAvatar.emoji}
            </div>
            <div className="user-details">
              <div className="user-name">{userName}</div>
              <div className="user-status">{selectedStatus}</div>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="create-post-form">
          <div className="form-section">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</h3>
            <div className="status-options">
              {AVAILABLE_STATUSES.map(status => (
                <button
                  key={status}
                  type="button"
                  className={`status-btn ${selectedStatus === status ? 'active' : ''}`}
                  onClick={() => setSelectedStatus(status)}
                >
                  {status}
                </button>
              ))}
            </div>
          </div>

          <div className="form-section">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä</h3>
            <div className="avatar-options">
              {AVAILABLE_AVATARS.map(avatar => (
                <button
                  key={avatar.emoji}
                  type="button"
                  className={`avatar-btn ${selectedAvatar.emoji === avatar.emoji ? 'active' : ''}`}
                  onClick={() => setSelectedAvatar(avatar)}
                  title={avatar.label}
                >
                  {avatar.emoji}
                </button>
              ))}
            </div>
          </div>

          <div className="form-section">
            <h3>–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞</h3>
            <div className="currency-select">
              <select 
                value={formData.currency}
                onChange={(e) => setFormData({...formData, currency: e.target.value})}
              >
                {CURRENCY_PAIRS.map(pair => (
                  <option key={pair.value} value={pair.value}>
                    {pair.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="form-section">
            <h3>–¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>
            <div className="prediction-options">
              <button
                type="button"
                className={`prediction-btn ${formData.prediction === '–†–æ—Å—Ç' ? 'active —Ä–æ—Å—Ç' : ''}`}
                onClick={() => setFormData({...formData, prediction: '–†–æ—Å—Ç'})}
              >
                –†–æ—Å—Ç
              </button>
              <button
                type="button"
                className={`prediction-btn ${formData.prediction === '–ü–∞–¥–µ–Ω–∏–µ' ? 'active –ø–∞–¥–µ–Ω–∏–µ' : ''}`}
                onClick={() => setFormData({...formData, prediction: '–ü–∞–¥–µ–Ω–∏–µ'})}
              >
                –ü–∞–¥–µ–Ω–∏–µ
              </button>
            </div>
          </div>

          <div className="form-section">
            <h3>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ</h3>
            <div className="confidence-slider">
              <input
                type="range"
                min="0"
                max="100"
                value={formData.confidence}
                onChange={(e) => setFormData({...formData, confidence: parseInt(e.target.value)})}
              />
              <div className="confidence-value">{formData.confidence}%</div>
            </div>
          </div>

          <div className="form-section">
            <h3>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞</h3>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({...formData, description: e.target.value})}
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –∏ –µ–≥–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ..."
              rows="4"
            />
          </div>

          <button type="submit" className="submit-btn">
            –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
          </button>
        </form>
      </div>
    </div>
  );
};

export default CreatePostModal; 